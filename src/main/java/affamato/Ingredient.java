//@Author Alex Issa
package affamato;

import java.util.HashMap;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.googlecode.objectify.annotation.Entity;
import com.googlecode.objectify.annotation.Id;
import com.googlecode.objectify.annotation.Index;

@Entity
public class Ingredient implements Comparable<Ingredient> 
{
    @Id Long id; //The @Id field can be of type Long, long, or String. 
    //If you use Long and save an entity with a null id, a numeric value will be 
    //generated for you using the standard GAE allocator for this kind. If you use 
    //String or the primitive long type, values will never be autogenerated.
    @Index String jsonString;
    @Index Long spoonId;
    @Index String ingredient;
    @Index Float amount;
    @Index String unit;
    @Index String unitShort;
    @Index Map<String,Tuple> nutrition;
    
    //private Ingredient() {}
    public Ingredient(String json) 
    {
    	try {
    	this.jsonString = json;
    	JSONObject data = new JSONObject(json);
    	this.spoonId = data.getLong("id");
    	this.ingredient = data.getString("name");
    	String amt= data.getString("amount");
    	this.amount = Float.valueOf(amt);
    	this.unit = data.getString("unit");
    	this.unitShort = data.getString("unitShort");
    	JSONArray nutrients = data.getJSONObject("nutrition").getJSONArray("nutrients");
    	this.nutrition = new HashMap<String,Tuple>();
    	for(int i = 0; i < nutrients.length(); i ++) {
    		JSONObject nutrient = nutrients.getJSONObject(i);
    		Tuple amount = new Tuple(nutrient.getString("amount"), nutrient.getString("unit"));
        	String title = nutrient.getString("title");
    		this.nutrition.put(title, amount);
    	}
    		
    	
    	
    	}
    	
    	catch (JSONException e) {
            e.printStackTrace();
        }
    }
    
    public String getName() {return this.ingredient;}
    
    

    
    
    @Override
    public int compareTo(Ingredient other) 
    {
        return 0;
    }
    
    public static class Tuple{
    	@Index Float amount;
    	@Index String unit;
		public Tuple(String amount, String unit) {
			this.amount = Float.valueOf(amount);
			this.unit = unit;
		}

    	
    }
} 
