//@Author Alex Issa
package affamato;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.googlecode.objectify.annotation.Entity;
import com.googlecode.objectify.annotation.Id;
import com.googlecode.objectify.annotation.Index;

@Entity
public class Ingredient implements Comparable<Ingredient> 
{
    @Id Long id; //The @Id field can be of type Long, long, or String. 
    //If you use Long and save an entity with a null id, a numeric value will be 
    //generated for you using the standard GAE allocator for this kind. If you use 
    //String or the primitive long type, values will never be autogenerated.
    @Index String jsonString;
    @Index Long spoonId;
    @Index String ingredient;
    @Index Float amount;
    @Index String unit;
    @Index String unitShort;
    @Index ArrayList<ArrayList<String>> nutrition;
    
    //private Ingredient() {}
    public Ingredient(String json) 
    {
    	try 
    	{
    		this.jsonString = json;
    		JSONObject data = new JSONObject(json);
    		this.spoonId = data.getLong("id");
    		this.ingredient = data.getString("name");
    		//String amt= data.getString("amount");
    		//this.amount = Float.valueOf(amt);
    		this.unit = data.getString("unit");
    		this.unitShort = data.getString("unitShort");
    		this.amount = data.getFloat("amount");
    		JSONArray nutrients = data.getJSONObject("nutrition").getJSONArray("nutrients");
    		this.nutrition = new ArrayList<ArrayList<String>>();
    		for(int i = 0; i < nutrients.length(); i ++) 
    		{
    			JSONObject nutrient = nutrients.getJSONObject(i);
    			ArrayList<String> curList = nutrition.get(i);
    			curList.add(nutrient.getString("title"));
    			curList.add(String.valueOf(nutrient.getFloat("amount")));
    			curList.add(nutrient.getString("unit"));
    		}
    	}
    	catch (JSONException e)
    	{
            e.printStackTrace();
        }
    }
    
    public String getName() 
    {
    	return this.ingredient;
    }
    
    //pass the name of the nutrient
    /*
    public Tuple getNutrient(String name) 
    {
    	return nutrition.get(name);
    }
    
    public Map<String, Tuple> getNutritionInfo()
    {
    	return nutrition;
    }
    */
    @Override
    public int compareTo(Ingredient other) 
    {
        return 0;
    }
    
   /* public static class Tuple
    {
    	@Index Float amount;
    	@Index String unit;
		public Tuple(String amount, String unit) 
		{
			this.amount = Float.valueOf(amount);
			this.unit = unit;
		}  	
    }
*/
} 
